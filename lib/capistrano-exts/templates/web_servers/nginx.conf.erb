server {
  listen <%= @listen_port || 80 %>;
  server_name <%= @application_url.join(' ') %>;

<% if authentification? %>
  # Authentification
  auth_basic "Valid user required to access this server";
  auth_basic_user_file <%= @authentification_file %>;
<% end %>

<% if @logs_path %>
  access_log <%= @logs_path %>/access.log;
  error_log <%= @logs_path %>/error.log;
<% end %>

<% unless reverse_proxy? %>
  root <%= @public_path %>;
<% end %>

<% if @indexes.present? %>
  index <%= @indexes.join(' ') %>;
<% end %>

  # Enable recursive error pages to catch 405 in a 503 error.
  recursive_error_pages on;

  # This allows people to use stylesheet, javascript and images in their
  # maintenance html file
  if ($request_filename ~* \.(css|js|jpg|gif|png)$) {
    expires 30d;
    break;
  }

  # If the maintenance page exists, throw a 503 error which we'd catch later.
  if (-f $document_root/__system__/maintenance/index.html) {
    return 503;
  }

  # Catch the 503 error and send it to the @503 location
  error_page 503 @503;

  # The @503 location
  location @503 {
    # Nginx will refuse POST requests to a static file and will throw a 405 error
    # So we need to catch that and display again our maintenance page
    error_page 405 = /__system__/maintenance/index.html;

    # Rewrite all the requests to the maintenance page if it exists.
    rewrite ^(.*)$ /__system__/maintenance/index.html break;
  }

  # Error Pages
  error_page 404 /404.html;
  error_page 500 502 504 /500.html;

<% if passenger? %>
  passenger_enabled on;

  <% if mod_rewrite? %>
  # this serves static files that exist without running other rewrite tests
  if (-f $request_filename) {
    break;
  }
  <% end %>
<% else %>
  location / {
  <% if mod_rewrite? %>
    # this serves static files that exist without running other rewrite tests
    if (-f $request_filename) {
      expires 30d;
      break;
    }

    # this sends all non-existing file or directory requests to index.php
    if (!-e $request_filename) {
      rewrite ^(.+)$ /index.php?q=$1 last;
    }
  <% end %>

  <% if reverse_proxy? %>
    proxy_pass http://<%= @application %>_reverse_proxy;
    proxy_set_header Host $host;
  <% end %>
  }

  <% @denied_access.each do |f| %>
    location ~ <%= Regexp.escape f %> {
      deny  all;
    }
  <% end if @denied_access.present? %>
<% end %>

<% if php_fpm? %>
  location ~ .php$ {
    fastcgi_pass   <%= @php_fpm_host %>:<%= @php_fpm_port %>;
    fastcgi_index  index.php;
    fastcgi_param  SCRIPT_FILENAME    <%= @public_path %>$fastcgi_script_name;

    fastcgi_param  QUERY_STRING       $query_string;
    fastcgi_param  REQUEST_METHOD     $request_method;
    fastcgi_param  CONTENT_TYPE       $content_type;
    fastcgi_param  CONTENT_LENGTH     $content_length;

    fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
    fastcgi_param  REQUEST_URI        $request_uri;
    fastcgi_param  DOCUMENT_URI       $document_uri;
    fastcgi_param  DOCUMENT_ROOT      $document_root;
    fastcgi_param  SERVER_PROTOCOL    $server_protocol;

    fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
    fastcgi_param  SERVER_SOFTWARE    nginx/$nginx_version;

    fastcgi_param  REMOTE_ADDR        $remote_addr;
    fastcgi_param  REMOTE_PORT        $remote_port;
    fastcgi_param  SERVER_ADDR        $server_addr;
    fastcgi_param  SERVER_PORT        $server_port;
    fastcgi_param  SERVER_NAME        $server_name;

  <% if php_build_with_force_cgi_redirect? %>
    fastcgi_param  REDIRECT_STATUS    200;
  <% end %>
  }
<% end %>
}

<% if reverse_proxy? %>
upstream <%= @application %>_reverse_proxy {
<% if @reverse_proxy_server_address.present? %>
  server <%= @reverse_proxy_server_address %>:<%= @reverse_proxy_server_port %> fail_timeout=0;
<% end %>

<% if @reverse_proxy_socket.present? %>
  server unix:<%= @reverse_proxy_socket %>;
<% end %>
}
<% end %>